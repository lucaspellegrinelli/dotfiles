# run 'nvim .' if no file/directory is specified
function nvim() {
    if [ $# -eq 0 ]; then
        command nvim .
    else
        command nvim "$@"
    fi
}

# why vim when you can nvim?
alias vim=nvim

# pretty ls
alias ls='ls --color=auto'

# fix pip index
alias fix-pip='pip config set global.index-url https://pypi.org/simple/'

# cd into projects
function cdp() {
    cd "$(find ~/projects ~/projects/bhub -mindepth 1 -maxdepth 1 -type d | fzf)"
}
zle -N cdp

# better history
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# shell integrations
eval "$(fzf --zsh)"

# update neovim
nvim_update() {
    OS=$(uname -s)
    ARCH=$(uname -m)
    if [ "$OS" = "Darwin" ]; then
        NVIM_ARCH="nvim-macos-arm64"
        echo "Detected macOS"
    elif [ "$OS" = "Linux" ]; then
        NVIM_ARCH="nvim-linux64"
        echo "Detected Linux"
    else
        echo "Unsupported OS: $OS"
        return 1
    fi

    echo "Downloading Neovim (https://github.com/neovim/neovim/releases/download/nightly/${NVIM_ARCH}.tar.gz)..."
    mkdir -p /tmp/nvim_download
    cd /tmp/nvim_download
    curl -sLO "https://github.com/neovim/neovim/releases/download/nightly/${NVIM_ARCH}.tar.gz"

    echo "Extracting Neovim..."
    tar xzf "${NVIM_ARCH}.tar.gz"
    
    echo "Updating Neovim..."
    rm -rf ~/.local/nvim
    mv ./${NVIM_ARCH} ~/.local/nvim

    echo "Cleaning up..."
    cd ~
    rm -rf /tmp/nvim_download

    echo "Neovim update completed successfully."
    echo $(nvim --version | head -n 1)
}
